// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMBuddy.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImbuddyRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImbuddyRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImbaseDefineRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMRecentContactSessionReq ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSData* attachData;
@end

@implementation IMRecentContactSessionReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) value_ {
  hasLatestUpdateTime_ = !!value_;
}
@synthesize latestUpdateTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRecentContactSessionReq* defaultIMRecentContactSessionReqInstance = nil;
+ (void) initialize {
  if (self == [IMRecentContactSessionReq class]) {
    defaultIMRecentContactSessionReqInstance = [[IMRecentContactSessionReq alloc] init];
  }
}
+ (IMRecentContactSessionReq*) defaultInstance {
  return defaultIMRecentContactSessionReqInstance;
}
- (IMRecentContactSessionReq*) defaultInstance {
  return defaultIMRecentContactSessionReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRecentContactSessionReq*) parseFromData:(NSData*) data {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromData:data] build];
}
+ (IMRecentContactSessionReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromInputStream:input] build];
}
+ (IMRecentContactSessionReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMRecentContactSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionReqBuilder*) builder {
  return [[IMRecentContactSessionReqBuilder alloc] init];
}
+ (IMRecentContactSessionReqBuilder*) builderWithPrototype:(IMRecentContactSessionReq*) prototype {
  return [[IMRecentContactSessionReq builder] mergeFrom:prototype];
}
- (IMRecentContactSessionReqBuilder*) builder {
  return [IMRecentContactSessionReq builder];
}
- (IMRecentContactSessionReqBuilder*) toBuilder {
  return [IMRecentContactSessionReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRecentContactSessionReq class]]) {
    return NO;
  }
  IMRecentContactSessionReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRecentContactSessionReqBuilder()
@property (strong) IMRecentContactSessionReq* result;
@end

@implementation IMRecentContactSessionReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMRecentContactSessionReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMRecentContactSessionReqBuilder*) clear {
  self.result = [[IMRecentContactSessionReq alloc] init];
  return self;
}
- (IMRecentContactSessionReqBuilder*) clone {
  return [IMRecentContactSessionReq builderWithPrototype:result];
}
- (IMRecentContactSessionReq*) defaultInstance {
  return [IMRecentContactSessionReq defaultInstance];
}
- (IMRecentContactSessionReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRecentContactSessionReq*) buildPartial {
  IMRecentContactSessionReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMRecentContactSessionReqBuilder*) mergeFrom:(IMRecentContactSessionReq*) other {
  if (other == [IMRecentContactSessionReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRecentContactSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRecentContactSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMRecentContactSessionReqBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMRecentContactSessionReqBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return result.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return result.latestUpdateTime;
}
- (IMRecentContactSessionReqBuilder*) setLatestUpdateTime:(UInt32) value {
  result.hasLatestUpdateTime = YES;
  result.latestUpdateTime = value;
  return self;
}
- (IMRecentContactSessionReqBuilder*) clearLatestUpdateTime {
  result.hasLatestUpdateTime = NO;
  result.latestUpdateTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMRecentContactSessionReqBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMRecentContactSessionReqBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMRecentContactSessionRsp ()
@property UInt32 userId;
@property (strong) NSMutableArray * contactSessionListArray;
@property (strong) NSData* attachData;
@end

@implementation IMRecentContactSessionRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
@synthesize contactSessionListArray;
@dynamic contactSessionList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.contactSessionListArray = nil;
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRecentContactSessionRsp* defaultIMRecentContactSessionRspInstance = nil;
+ (void) initialize {
  if (self == [IMRecentContactSessionRsp class]) {
    defaultIMRecentContactSessionRspInstance = [[IMRecentContactSessionRsp alloc] init];
  }
}
+ (IMRecentContactSessionRsp*) defaultInstance {
  return defaultIMRecentContactSessionRspInstance;
}
- (IMRecentContactSessionRsp*) defaultInstance {
  return defaultIMRecentContactSessionRspInstance;
}
- (NSArray *)contactSessionList {
  return contactSessionListArray;
}
- (ContactSessionInfo*)contactSessionListAtIndex:(NSUInteger)index {
  return [contactSessionListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitcontactSessionList = YES;
   [self.contactSessionList enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcontactSessionList = NO;
      *stop = YES;
    }
  }];
  if (!isInitcontactSessionList) return isInitcontactSessionList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRecentContactSessionRsp*) parseFromData:(NSData*) data {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromData:data] build];
}
+ (IMRecentContactSessionRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromInputStream:input] build];
}
+ (IMRecentContactSessionRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMRecentContactSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionRspBuilder*) builder {
  return [[IMRecentContactSessionRspBuilder alloc] init];
}
+ (IMRecentContactSessionRspBuilder*) builderWithPrototype:(IMRecentContactSessionRsp*) prototype {
  return [[IMRecentContactSessionRsp builder] mergeFrom:prototype];
}
- (IMRecentContactSessionRspBuilder*) builder {
  return [IMRecentContactSessionRsp builder];
}
- (IMRecentContactSessionRspBuilder*) toBuilder {
  return [IMRecentContactSessionRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"contactSessionList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRecentContactSessionRsp class]]) {
    return NO;
  }
  IMRecentContactSessionRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.contactSessionListArray isEqualToArray:otherMessage.contactSessionListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRecentContactSessionRspBuilder()
@property (strong) IMRecentContactSessionRsp* result;
@end

@implementation IMRecentContactSessionRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMRecentContactSessionRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMRecentContactSessionRspBuilder*) clear {
  self.result = [[IMRecentContactSessionRsp alloc] init];
  return self;
}
- (IMRecentContactSessionRspBuilder*) clone {
  return [IMRecentContactSessionRsp builderWithPrototype:result];
}
- (IMRecentContactSessionRsp*) defaultInstance {
  return [IMRecentContactSessionRsp defaultInstance];
}
- (IMRecentContactSessionRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRecentContactSessionRsp*) buildPartial {
  IMRecentContactSessionRsp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMRecentContactSessionRspBuilder*) mergeFrom:(IMRecentContactSessionRsp*) other {
  if (other == [IMRecentContactSessionRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.contactSessionListArray.count > 0) {
    if (result.contactSessionListArray == nil) {
      result.contactSessionListArray = [[NSMutableArray alloc] initWithArray:other.contactSessionListArray];
    } else {
      [result.contactSessionListArray addObjectsFromArray:other.contactSessionListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRecentContactSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRecentContactSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        ContactSessionInfoBuilder* subBuilder = [ContactSessionInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContactSessionList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMRecentContactSessionRspBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMRecentContactSessionRspBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (NSMutableArray *)contactSessionList {
  return result.contactSessionListArray;
}
- (ContactSessionInfo*)contactSessionListAtIndex:(NSUInteger)index {
  return [result contactSessionListAtIndex:index];
}
- (IMRecentContactSessionRspBuilder *)addContactSessionList:(ContactSessionInfo*)value {
  if (result.contactSessionListArray == nil) {
    result.contactSessionListArray = [[NSMutableArray alloc]init];
  }
  [result.contactSessionListArray addObject:value];
  return self;
}
- (IMRecentContactSessionRspBuilder *)setContactSessionListArray:(NSArray *)array {
  result.contactSessionListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMRecentContactSessionRspBuilder *)clearContactSessionList {
  result.contactSessionListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMRecentContactSessionRspBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMRecentContactSessionRspBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMUserStatNotify ()
@property (strong) UserStat* userStat;
@end

@implementation IMUserStatNotify

- (BOOL) hasUserStat {
  return !!hasUserStat_;
}
- (void) setHasUserStat:(BOOL) value_ {
  hasUserStat_ = !!value_;
}
@synthesize userStat;
- (void) dealloc {
  self.userStat = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userStat = [UserStat defaultInstance];
  }
  return self;
}
static IMUserStatNotify* defaultIMUserStatNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMUserStatNotify class]) {
    defaultIMUserStatNotifyInstance = [[IMUserStatNotify alloc] init];
  }
}
+ (IMUserStatNotify*) defaultInstance {
  return defaultIMUserStatNotifyInstance;
}
- (IMUserStatNotify*) defaultInstance {
  return defaultIMUserStatNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserStat) {
    return NO;
  }
  if (!self.userStat.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserStat) {
    [output writeMessage:1 value:self.userStat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserStat) {
    size_ += computeMessageSize(1, self.userStat);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUserStatNotify*) parseFromData:(NSData*) data {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromData:data] build];
}
+ (IMUserStatNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromInputStream:input] build];
}
+ (IMUserStatNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMUserStatNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatNotifyBuilder*) builder {
  return [[IMUserStatNotifyBuilder alloc] init];
}
+ (IMUserStatNotifyBuilder*) builderWithPrototype:(IMUserStatNotify*) prototype {
  return [[IMUserStatNotify builder] mergeFrom:prototype];
}
- (IMUserStatNotifyBuilder*) builder {
  return [IMUserStatNotify builder];
}
- (IMUserStatNotifyBuilder*) toBuilder {
  return [IMUserStatNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserStat) {
    [output appendFormat:@"%@%@ {\n", indent, @"userStat"];
    [self.userStat writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUserStatNotify class]]) {
    return NO;
  }
  IMUserStatNotify *otherMessage = other;
  return
      self.hasUserStat == otherMessage.hasUserStat &&
      (!self.hasUserStat || [self.userStat isEqual:otherMessage.userStat]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserStat) {
    hashCode = hashCode * 31 + [self.userStat hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUserStatNotifyBuilder()
@property (strong) IMUserStatNotify* result;
@end

@implementation IMUserStatNotifyBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMUserStatNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMUserStatNotifyBuilder*) clear {
  self.result = [[IMUserStatNotify alloc] init];
  return self;
}
- (IMUserStatNotifyBuilder*) clone {
  return [IMUserStatNotify builderWithPrototype:result];
}
- (IMUserStatNotify*) defaultInstance {
  return [IMUserStatNotify defaultInstance];
}
- (IMUserStatNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUserStatNotify*) buildPartial {
  IMUserStatNotify* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMUserStatNotifyBuilder*) mergeFrom:(IMUserStatNotify*) other {
  if (other == [IMUserStatNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserStat) {
    [self mergeUserStat:other.userStat];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUserStatNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUserStatNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        UserStatBuilder* subBuilder = [UserStat builder];
        if (self.hasUserStat) {
          [subBuilder mergeFrom:self.userStat];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserStat:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserStat {
  return result.hasUserStat;
}
- (UserStat*) userStat {
  return result.userStat;
}
- (IMUserStatNotifyBuilder*) setUserStat:(UserStat*) value {
  result.hasUserStat = YES;
  result.userStat = value;
  return self;
}
- (IMUserStatNotifyBuilder*) setUserStatBuilder:(UserStatBuilder*) builderForValue {
  return [self setUserStat:[builderForValue build]];
}
- (IMUserStatNotifyBuilder*) mergeUserStat:(UserStat*) value {
  if (result.hasUserStat &&
      result.userStat != [UserStat defaultInstance]) {
    result.userStat =
      [[[UserStat builderWithPrototype:result.userStat] mergeFrom:value] buildPartial];
  } else {
    result.userStat = value;
  }
  result.hasUserStat = YES;
  return self;
}
- (IMUserStatNotifyBuilder*) clearUserStat {
  result.hasUserStat = NO;
  result.userStat = [UserStat defaultInstance];
  return self;
}
@end

@interface IMUsersInfoReq ()
@property UInt32 userId;
@property (strong) PBAppendableArray * userIdListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersInfoReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
@synthesize userIdListArray;
@dynamic userIdList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.userIdListArray = nil;
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersInfoReq* defaultIMUsersInfoReqInstance = nil;
+ (void) initialize {
  if (self == [IMUsersInfoReq class]) {
    defaultIMUsersInfoReqInstance = [[IMUsersInfoReq alloc] init];
  }
}
+ (IMUsersInfoReq*) defaultInstance {
  return defaultIMUsersInfoReqInstance;
}
- (IMUsersInfoReq*) defaultInstance {
  return defaultIMUsersInfoReqInstance;
}
- (PBArray *)userIdList {
  return userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [userIdListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  const NSUInteger userIdListArrayCount = self.userIdListArray.count;
  if (userIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < userIdListArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersInfoReq*) parseFromData:(NSData*) data {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromData:data] build];
}
+ (IMUsersInfoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromInputStream:input] build];
}
+ (IMUsersInfoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoReqBuilder*) builder {
  return [[IMUsersInfoReqBuilder alloc] init];
}
+ (IMUsersInfoReqBuilder*) builderWithPrototype:(IMUsersInfoReq*) prototype {
  return [[IMUsersInfoReq builder] mergeFrom:prototype];
}
- (IMUsersInfoReqBuilder*) builder {
  return [IMUsersInfoReq builder];
}
- (IMUsersInfoReqBuilder*) toBuilder {
  return [IMUsersInfoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIdList", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersInfoReq class]]) {
    return NO;
  }
  IMUsersInfoReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userIdListArray isEqualToArray:otherMessage.userIdListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersInfoReqBuilder()
@property (strong) IMUsersInfoReq* result;
@end

@implementation IMUsersInfoReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMUsersInfoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMUsersInfoReqBuilder*) clear {
  self.result = [[IMUsersInfoReq alloc] init];
  return self;
}
- (IMUsersInfoReqBuilder*) clone {
  return [IMUsersInfoReq builderWithPrototype:result];
}
- (IMUsersInfoReq*) defaultInstance {
  return [IMUsersInfoReq defaultInstance];
}
- (IMUsersInfoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersInfoReq*) buildPartial {
  IMUsersInfoReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMUsersInfoReqBuilder*) mergeFrom:(IMUsersInfoReq*) other {
  if (other == [IMUsersInfoReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userIdListArray.count > 0) {
    if (result.userIdListArray == nil) {
      result.userIdListArray = [other.userIdListArray copy];
    } else {
      [result.userIdListArray appendArray:other.userIdListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self addUserIdList:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMUsersInfoReqBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMUsersInfoReqBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (PBAppendableArray *)userIdList {
  return result.userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [result userIdListAtIndex:index];
}
- (IMUsersInfoReqBuilder *)addUserIdList:(UInt32)value {
  if (result.userIdListArray == nil) {
    result.userIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.userIdListArray addUint32:value];
  return self;
}
- (IMUsersInfoReqBuilder *)setUserIdListArray:(NSArray *)array {
  result.userIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMUsersInfoReqBuilder *)setUserIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  result.userIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMUsersInfoReqBuilder *)clearUserIdList {
  result.userIdListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMUsersInfoReqBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMUsersInfoReqBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMUsersInfoRsp ()
@property UInt32 userId;
@property (strong) NSMutableArray * userInfoListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersInfoRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
@synthesize userInfoListArray;
@dynamic userInfoList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.userInfoListArray = nil;
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersInfoRsp* defaultIMUsersInfoRspInstance = nil;
+ (void) initialize {
  if (self == [IMUsersInfoRsp class]) {
    defaultIMUsersInfoRspInstance = [[IMUsersInfoRsp alloc] init];
  }
}
+ (IMUsersInfoRsp*) defaultInstance {
  return defaultIMUsersInfoRspInstance;
}
- (IMUsersInfoRsp*) defaultInstance {
  return defaultIMUsersInfoRspInstance;
}
- (NSArray *)userInfoList {
  return userInfoListArray;
}
- (UserInfo*)userInfoListAtIndex:(NSUInteger)index {
  return [userInfoListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInituserInfoList = YES;
   [self.userInfoList enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserInfoList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserInfoList) return isInituserInfoList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersInfoRsp*) parseFromData:(NSData*) data {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromData:data] build];
}
+ (IMUsersInfoRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromInputStream:input] build];
}
+ (IMUsersInfoRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoRspBuilder*) builder {
  return [[IMUsersInfoRspBuilder alloc] init];
}
+ (IMUsersInfoRspBuilder*) builderWithPrototype:(IMUsersInfoRsp*) prototype {
  return [[IMUsersInfoRsp builder] mergeFrom:prototype];
}
- (IMUsersInfoRspBuilder*) builder {
  return [IMUsersInfoRsp builder];
}
- (IMUsersInfoRspBuilder*) toBuilder {
  return [IMUsersInfoRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userInfoList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersInfoRsp class]]) {
    return NO;
  }
  IMUsersInfoRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userInfoListArray isEqualToArray:otherMessage.userInfoListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersInfoRspBuilder()
@property (strong) IMUsersInfoRsp* result;
@end

@implementation IMUsersInfoRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMUsersInfoRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMUsersInfoRspBuilder*) clear {
  self.result = [[IMUsersInfoRsp alloc] init];
  return self;
}
- (IMUsersInfoRspBuilder*) clone {
  return [IMUsersInfoRsp builderWithPrototype:result];
}
- (IMUsersInfoRsp*) defaultInstance {
  return [IMUsersInfoRsp defaultInstance];
}
- (IMUsersInfoRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersInfoRsp*) buildPartial {
  IMUsersInfoRsp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMUsersInfoRspBuilder*) mergeFrom:(IMUsersInfoRsp*) other {
  if (other == [IMUsersInfoRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userInfoListArray.count > 0) {
    if (result.userInfoListArray == nil) {
      result.userInfoListArray = [[NSMutableArray alloc] initWithArray:other.userInfoListArray];
    } else {
      [result.userInfoListArray addObjectsFromArray:other.userInfoListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        UserInfoBuilder* subBuilder = [UserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserInfoList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMUsersInfoRspBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMUsersInfoRspBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (NSMutableArray *)userInfoList {
  return result.userInfoListArray;
}
- (UserInfo*)userInfoListAtIndex:(NSUInteger)index {
  return [result userInfoListAtIndex:index];
}
- (IMUsersInfoRspBuilder *)addUserInfoList:(UserInfo*)value {
  if (result.userInfoListArray == nil) {
    result.userInfoListArray = [[NSMutableArray alloc]init];
  }
  [result.userInfoListArray addObject:value];
  return self;
}
- (IMUsersInfoRspBuilder *)setUserInfoListArray:(NSArray *)array {
  result.userInfoListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMUsersInfoRspBuilder *)clearUserInfoList {
  result.userInfoListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMUsersInfoRspBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMUsersInfoRspBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMRemoveSessionReq ()
@property UInt32 userId;
@property SessionType sessionType;
@property UInt32 sessionId;
@property (strong) NSData* attachData;
@end

@implementation IMRemoveSessionReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) value_ {
  hasSessionType_ = !!value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value_ {
  hasSessionId_ = !!value_;
}
@synthesize sessionId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRemoveSessionReq* defaultIMRemoveSessionReqInstance = nil;
+ (void) initialize {
  if (self == [IMRemoveSessionReq class]) {
    defaultIMRemoveSessionReqInstance = [[IMRemoveSessionReq alloc] init];
  }
}
+ (IMRemoveSessionReq*) defaultInstance {
  return defaultIMRemoveSessionReqInstance;
}
- (IMRemoveSessionReq*) defaultInstance {
  return defaultIMRemoveSessionReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:3 value:self.sessionId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(3, self.sessionId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRemoveSessionReq*) parseFromData:(NSData*) data {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromData:data] build];
}
+ (IMRemoveSessionReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromInputStream:input] build];
}
+ (IMRemoveSessionReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMRemoveSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionReqBuilder*) builder {
  return [[IMRemoveSessionReqBuilder alloc] init];
}
+ (IMRemoveSessionReqBuilder*) builderWithPrototype:(IMRemoveSessionReq*) prototype {
  return [[IMRemoveSessionReq builder] mergeFrom:prototype];
}
- (IMRemoveSessionReqBuilder*) builder {
  return [IMRemoveSessionReq builder];
}
- (IMRemoveSessionReqBuilder*) toBuilder {
  return [IMRemoveSessionReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"sessionType", self.sessionType];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRemoveSessionReq class]]) {
    return NO;
  }
  IMRemoveSessionReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRemoveSessionReqBuilder()
@property (strong) IMRemoveSessionReq* result;
@end

@implementation IMRemoveSessionReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMRemoveSessionReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMRemoveSessionReqBuilder*) clear {
  self.result = [[IMRemoveSessionReq alloc] init];
  return self;
}
- (IMRemoveSessionReqBuilder*) clone {
  return [IMRemoveSessionReq builderWithPrototype:result];
}
- (IMRemoveSessionReq*) defaultInstance {
  return [IMRemoveSessionReq defaultInstance];
}
- (IMRemoveSessionReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRemoveSessionReq*) buildPartial {
  IMRemoveSessionReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMRemoveSessionReqBuilder*) mergeFrom:(IMRemoveSessionReq*) other {
  if (other == [IMRemoveSessionReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRemoveSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRemoveSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMRemoveSessionReqBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return result.hasSessionType;
}
- (SessionType) sessionType {
  return result.sessionType;
}
- (IMRemoveSessionReqBuilder*) setSessionType:(SessionType) value {
  result.hasSessionType = YES;
  result.sessionType = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearSessionType {
  result.hasSessionType = NO;
  result.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (UInt32) sessionId {
  return result.sessionId;
}
- (IMRemoveSessionReqBuilder*) setSessionId:(UInt32) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMRemoveSessionReqBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMRemoveSessionRsp ()
@property UInt32 userId;
@property UInt32 resultCode;
@property SessionType sessionType;
@property UInt32 sessionId;
@property (strong) NSData* attachData;
@end

@implementation IMRemoveSessionRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) value_ {
  hasResultCode_ = !!value_;
}
@synthesize resultCode;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) value_ {
  hasSessionType_ = !!value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value_ {
  hasSessionId_ = !!value_;
}
@synthesize sessionId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.resultCode = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRemoveSessionRsp* defaultIMRemoveSessionRspInstance = nil;
+ (void) initialize {
  if (self == [IMRemoveSessionRsp class]) {
    defaultIMRemoveSessionRspInstance = [[IMRemoveSessionRsp alloc] init];
  }
}
+ (IMRemoveSessionRsp*) defaultInstance {
  return defaultIMRemoveSessionRspInstance;
}
- (IMRemoveSessionRsp*) defaultInstance {
  return defaultIMRemoveSessionRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  if (self.hasSessionType) {
    [output writeEnum:3 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:4 value:self.sessionId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(3, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(4, self.sessionId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRemoveSessionRsp*) parseFromData:(NSData*) data {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromData:data] build];
}
+ (IMRemoveSessionRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromInputStream:input] build];
}
+ (IMRemoveSessionRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMRemoveSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionRspBuilder*) builder {
  return [[IMRemoveSessionRspBuilder alloc] init];
}
+ (IMRemoveSessionRspBuilder*) builderWithPrototype:(IMRemoveSessionRsp*) prototype {
  return [[IMRemoveSessionRsp builder] mergeFrom:prototype];
}
- (IMRemoveSessionRspBuilder*) builder {
  return [IMRemoveSessionRsp builder];
}
- (IMRemoveSessionRspBuilder*) toBuilder {
  return [IMRemoveSessionRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"sessionType", self.sessionType];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRemoveSessionRsp class]]) {
    return NO;
  }
  IMRemoveSessionRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRemoveSessionRspBuilder()
@property (strong) IMRemoveSessionRsp* result;
@end

@implementation IMRemoveSessionRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMRemoveSessionRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMRemoveSessionRspBuilder*) clear {
  self.result = [[IMRemoveSessionRsp alloc] init];
  return self;
}
- (IMRemoveSessionRspBuilder*) clone {
  return [IMRemoveSessionRsp builderWithPrototype:result];
}
- (IMRemoveSessionRsp*) defaultInstance {
  return [IMRemoveSessionRsp defaultInstance];
}
- (IMRemoveSessionRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRemoveSessionRsp*) buildPartial {
  IMRemoveSessionRsp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMRemoveSessionRspBuilder*) mergeFrom:(IMRemoveSessionRsp*) other {
  if (other == [IMRemoveSessionRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRemoveSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRemoveSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 24: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setSessionId:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMRemoveSessionRspBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return result.hasResultCode;
}
- (UInt32) resultCode {
  return result.resultCode;
}
- (IMRemoveSessionRspBuilder*) setResultCode:(UInt32) value {
  result.hasResultCode = YES;
  result.resultCode = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearResultCode {
  result.hasResultCode = NO;
  result.resultCode = 0;
  return self;
}
- (BOOL) hasSessionType {
  return result.hasSessionType;
}
- (SessionType) sessionType {
  return result.sessionType;
}
- (IMRemoveSessionRspBuilder*) setSessionType:(SessionType) value {
  result.hasSessionType = YES;
  result.sessionType = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearSessionType {
  result.hasSessionType = NO;
  result.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (UInt32) sessionId {
  return result.sessionId;
}
- (IMRemoveSessionRspBuilder*) setSessionId:(UInt32) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMRemoveSessionRspBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMAllUserReq ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSData* attachData;
@end

@implementation IMAllUserReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) value_ {
  hasLatestUpdateTime_ = !!value_;
}
@synthesize latestUpdateTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMAllUserReq* defaultIMAllUserReqInstance = nil;
+ (void) initialize {
  if (self == [IMAllUserReq class]) {
    defaultIMAllUserReqInstance = [[IMAllUserReq alloc] init];
  }
}
+ (IMAllUserReq*) defaultInstance {
  return defaultIMAllUserReqInstance;
}
- (IMAllUserReq*) defaultInstance {
  return defaultIMAllUserReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAllUserReq*) parseFromData:(NSData*) data {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromData:data] build];
}
+ (IMAllUserReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromInputStream:input] build];
}
+ (IMAllUserReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMAllUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserReqBuilder*) builder {
  return [[IMAllUserReqBuilder alloc] init];
}
+ (IMAllUserReqBuilder*) builderWithPrototype:(IMAllUserReq*) prototype {
  return [[IMAllUserReq builder] mergeFrom:prototype];
}
- (IMAllUserReqBuilder*) builder {
  return [IMAllUserReq builder];
}
- (IMAllUserReqBuilder*) toBuilder {
  return [IMAllUserReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAllUserReq class]]) {
    return NO;
  }
  IMAllUserReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAllUserReqBuilder()
@property (strong) IMAllUserReq* result;
@end

@implementation IMAllUserReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMAllUserReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMAllUserReqBuilder*) clear {
  self.result = [[IMAllUserReq alloc] init];
  return self;
}
- (IMAllUserReqBuilder*) clone {
  return [IMAllUserReq builderWithPrototype:result];
}
- (IMAllUserReq*) defaultInstance {
  return [IMAllUserReq defaultInstance];
}
- (IMAllUserReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAllUserReq*) buildPartial {
  IMAllUserReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMAllUserReqBuilder*) mergeFrom:(IMAllUserReq*) other {
  if (other == [IMAllUserReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAllUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAllUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMAllUserReqBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMAllUserReqBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return result.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return result.latestUpdateTime;
}
- (IMAllUserReqBuilder*) setLatestUpdateTime:(UInt32) value {
  result.hasLatestUpdateTime = YES;
  result.latestUpdateTime = value;
  return self;
}
- (IMAllUserReqBuilder*) clearLatestUpdateTime {
  result.hasLatestUpdateTime = NO;
  result.latestUpdateTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMAllUserReqBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMAllUserReqBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMAllUserRsp ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSMutableArray * userListArray;
@property (strong) NSData* attachData;
@end

@implementation IMAllUserRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) value_ {
  hasLatestUpdateTime_ = !!value_;
}
@synthesize latestUpdateTime;
@synthesize userListArray;
@dynamic userList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.userListArray = nil;
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMAllUserRsp* defaultIMAllUserRspInstance = nil;
+ (void) initialize {
  if (self == [IMAllUserRsp class]) {
    defaultIMAllUserRspInstance = [[IMAllUserRsp alloc] init];
  }
}
+ (IMAllUserRsp*) defaultInstance {
  return defaultIMAllUserRspInstance;
}
- (IMAllUserRsp*) defaultInstance {
  return defaultIMAllUserRspInstance;
}
- (NSArray *)userList {
  return userListArray;
}
- (UserInfo*)userListAtIndex:(NSUInteger)index {
  return [userListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  __block BOOL isInituserList = YES;
   [self.userList enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserList) return isInituserList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAllUserRsp*) parseFromData:(NSData*) data {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromData:data] build];
}
+ (IMAllUserRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromInputStream:input] build];
}
+ (IMAllUserRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMAllUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserRspBuilder*) builder {
  return [[IMAllUserRspBuilder alloc] init];
}
+ (IMAllUserRspBuilder*) builderWithPrototype:(IMAllUserRsp*) prototype {
  return [[IMAllUserRsp builder] mergeFrom:prototype];
}
- (IMAllUserRspBuilder*) builder {
  return [IMAllUserRsp builder];
}
- (IMAllUserRspBuilder*) toBuilder {
  return [IMAllUserRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAllUserRsp class]]) {
    return NO;
  }
  IMAllUserRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      [self.userListArray isEqualToArray:otherMessage.userListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAllUserRspBuilder()
@property (strong) IMAllUserRsp* result;
@end

@implementation IMAllUserRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMAllUserRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMAllUserRspBuilder*) clear {
  self.result = [[IMAllUserRsp alloc] init];
  return self;
}
- (IMAllUserRspBuilder*) clone {
  return [IMAllUserRsp builderWithPrototype:result];
}
- (IMAllUserRsp*) defaultInstance {
  return [IMAllUserRsp defaultInstance];
}
- (IMAllUserRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAllUserRsp*) buildPartial {
  IMAllUserRsp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMAllUserRspBuilder*) mergeFrom:(IMAllUserRsp*) other {
  if (other == [IMAllUserRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.userListArray.count > 0) {
    if (result.userListArray == nil) {
      result.userListArray = [[NSMutableArray alloc] initWithArray:other.userListArray];
    } else {
      [result.userListArray addObjectsFromArray:other.userListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAllUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAllUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 26: {
        UserInfoBuilder* subBuilder = [UserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMAllUserRspBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMAllUserRspBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return result.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return result.latestUpdateTime;
}
- (IMAllUserRspBuilder*) setLatestUpdateTime:(UInt32) value {
  result.hasLatestUpdateTime = YES;
  result.latestUpdateTime = value;
  return self;
}
- (IMAllUserRspBuilder*) clearLatestUpdateTime {
  result.hasLatestUpdateTime = NO;
  result.latestUpdateTime = 0;
  return self;
}
- (NSMutableArray *)userList {
  return result.userListArray;
}
- (UserInfo*)userListAtIndex:(NSUInteger)index {
  return [result userListAtIndex:index];
}
- (IMAllUserRspBuilder *)addUserList:(UserInfo*)value {
  if (result.userListArray == nil) {
    result.userListArray = [[NSMutableArray alloc]init];
  }
  [result.userListArray addObject:value];
  return self;
}
- (IMAllUserRspBuilder *)setUserListArray:(NSArray *)array {
  result.userListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMAllUserRspBuilder *)clearUserList {
  result.userListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMAllUserRspBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMAllUserRspBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMUsersStatReq ()
@property UInt32 userId;
@property (strong) PBAppendableArray * userIdListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersStatReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
@synthesize userIdListArray;
@dynamic userIdList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.userIdListArray = nil;
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersStatReq* defaultIMUsersStatReqInstance = nil;
+ (void) initialize {
  if (self == [IMUsersStatReq class]) {
    defaultIMUsersStatReqInstance = [[IMUsersStatReq alloc] init];
  }
}
+ (IMUsersStatReq*) defaultInstance {
  return defaultIMUsersStatReqInstance;
}
- (IMUsersStatReq*) defaultInstance {
  return defaultIMUsersStatReqInstance;
}
- (PBArray *)userIdList {
  return userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [userIdListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  const NSUInteger userIdListArrayCount = self.userIdListArray.count;
  if (userIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < userIdListArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersStatReq*) parseFromData:(NSData*) data {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromData:data] build];
}
+ (IMUsersStatReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromInputStream:input] build];
}
+ (IMUsersStatReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersStatReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatReqBuilder*) builder {
  return [[IMUsersStatReqBuilder alloc] init];
}
+ (IMUsersStatReqBuilder*) builderWithPrototype:(IMUsersStatReq*) prototype {
  return [[IMUsersStatReq builder] mergeFrom:prototype];
}
- (IMUsersStatReqBuilder*) builder {
  return [IMUsersStatReq builder];
}
- (IMUsersStatReqBuilder*) toBuilder {
  return [IMUsersStatReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIdList", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersStatReq class]]) {
    return NO;
  }
  IMUsersStatReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userIdListArray isEqualToArray:otherMessage.userIdListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersStatReqBuilder()
@property (strong) IMUsersStatReq* result;
@end

@implementation IMUsersStatReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMUsersStatReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMUsersStatReqBuilder*) clear {
  self.result = [[IMUsersStatReq alloc] init];
  return self;
}
- (IMUsersStatReqBuilder*) clone {
  return [IMUsersStatReq builderWithPrototype:result];
}
- (IMUsersStatReq*) defaultInstance {
  return [IMUsersStatReq defaultInstance];
}
- (IMUsersStatReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersStatReq*) buildPartial {
  IMUsersStatReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMUsersStatReqBuilder*) mergeFrom:(IMUsersStatReq*) other {
  if (other == [IMUsersStatReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userIdListArray.count > 0) {
    if (result.userIdListArray == nil) {
      result.userIdListArray = [other.userIdListArray copy];
    } else {
      [result.userIdListArray appendArray:other.userIdListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersStatReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersStatReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self addUserIdList:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMUsersStatReqBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMUsersStatReqBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (PBAppendableArray *)userIdList {
  return result.userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [result userIdListAtIndex:index];
}
- (IMUsersStatReqBuilder *)addUserIdList:(UInt32)value {
  if (result.userIdListArray == nil) {
    result.userIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.userIdListArray addUint32:value];
  return self;
}
- (IMUsersStatReqBuilder *)setUserIdListArray:(NSArray *)array {
  result.userIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMUsersStatReqBuilder *)setUserIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  result.userIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMUsersStatReqBuilder *)clearUserIdList {
  result.userIdListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMUsersStatReqBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMUsersStatReqBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMUsersStatRsp ()
@property UInt32 userId;
@property (strong) NSMutableArray * userStatListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersStatRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
@synthesize userStatListArray;
@dynamic userStatList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.userStatListArray = nil;
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersStatRsp* defaultIMUsersStatRspInstance = nil;
+ (void) initialize {
  if (self == [IMUsersStatRsp class]) {
    defaultIMUsersStatRspInstance = [[IMUsersStatRsp alloc] init];
  }
}
+ (IMUsersStatRsp*) defaultInstance {
  return defaultIMUsersStatRspInstance;
}
- (IMUsersStatRsp*) defaultInstance {
  return defaultIMUsersStatRspInstance;
}
- (NSArray *)userStatList {
  return userStatListArray;
}
- (UserStat*)userStatListAtIndex:(NSUInteger)index {
  return [userStatListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInituserStatList = YES;
   [self.userStatList enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserStatList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserStatList) return isInituserStatList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersStatRsp*) parseFromData:(NSData*) data {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromData:data] build];
}
+ (IMUsersStatRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromInputStream:input] build];
}
+ (IMUsersStatRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersStatRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatRspBuilder*) builder {
  return [[IMUsersStatRspBuilder alloc] init];
}
+ (IMUsersStatRspBuilder*) builderWithPrototype:(IMUsersStatRsp*) prototype {
  return [[IMUsersStatRsp builder] mergeFrom:prototype];
}
- (IMUsersStatRspBuilder*) builder {
  return [IMUsersStatRsp builder];
}
- (IMUsersStatRspBuilder*) toBuilder {
  return [IMUsersStatRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userStatList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersStatRsp class]]) {
    return NO;
  }
  IMUsersStatRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userStatListArray isEqualToArray:otherMessage.userStatListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersStatRspBuilder()
@property (strong) IMUsersStatRsp* result;
@end

@implementation IMUsersStatRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMUsersStatRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMUsersStatRspBuilder*) clear {
  self.result = [[IMUsersStatRsp alloc] init];
  return self;
}
- (IMUsersStatRspBuilder*) clone {
  return [IMUsersStatRsp builderWithPrototype:result];
}
- (IMUsersStatRsp*) defaultInstance {
  return [IMUsersStatRsp defaultInstance];
}
- (IMUsersStatRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersStatRsp*) buildPartial {
  IMUsersStatRsp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMUsersStatRspBuilder*) mergeFrom:(IMUsersStatRsp*) other {
  if (other == [IMUsersStatRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userStatListArray.count > 0) {
    if (result.userStatListArray == nil) {
      result.userStatListArray = [[NSMutableArray alloc] initWithArray:other.userStatListArray];
    } else {
      [result.userStatListArray addObjectsFromArray:other.userStatListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersStatRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersStatRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        UserStatBuilder* subBuilder = [UserStat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserStatList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMUsersStatRspBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMUsersStatRspBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (NSMutableArray *)userStatList {
  return result.userStatListArray;
}
- (UserStat*)userStatListAtIndex:(NSUInteger)index {
  return [result userStatListAtIndex:index];
}
- (IMUsersStatRspBuilder *)addUserStatList:(UserStat*)value {
  if (result.userStatListArray == nil) {
    result.userStatListArray = [[NSMutableArray alloc]init];
  }
  [result.userStatListArray addObject:value];
  return self;
}
- (IMUsersStatRspBuilder *)setUserStatListArray:(NSArray *)array {
  result.userStatListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMUsersStatRspBuilder *)clearUserStatList {
  result.userStatListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMUsersStatRspBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMUsersStatRspBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMChangeAvatarReq ()
@property UInt32 userId;
@property (strong) NSString* avatarUrl;
@property (strong) NSData* attachData;
@end

@implementation IMChangeAvatarReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasAvatarUrl {
  return !!hasAvatarUrl_;
}
- (void) setHasAvatarUrl:(BOOL) value_ {
  hasAvatarUrl_ = !!value_;
}
@synthesize avatarUrl;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.avatarUrl = nil;
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.avatarUrl = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMChangeAvatarReq* defaultIMChangeAvatarReqInstance = nil;
+ (void) initialize {
  if (self == [IMChangeAvatarReq class]) {
    defaultIMChangeAvatarReqInstance = [[IMChangeAvatarReq alloc] init];
  }
}
+ (IMChangeAvatarReq*) defaultInstance {
  return defaultIMChangeAvatarReqInstance;
}
- (IMChangeAvatarReq*) defaultInstance {
  return defaultIMChangeAvatarReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasAvatarUrl) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasAvatarUrl) {
    [output writeString:2 value:self.avatarUrl];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasAvatarUrl) {
    size_ += computeStringSize(2, self.avatarUrl);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMChangeAvatarReq*) parseFromData:(NSData*) data {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromData:data] build];
}
+ (IMChangeAvatarReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromInputStream:input] build];
}
+ (IMChangeAvatarReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMChangeAvatarReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarReqBuilder*) builder {
  return [[IMChangeAvatarReqBuilder alloc] init];
}
+ (IMChangeAvatarReqBuilder*) builderWithPrototype:(IMChangeAvatarReq*) prototype {
  return [[IMChangeAvatarReq builder] mergeFrom:prototype];
}
- (IMChangeAvatarReqBuilder*) builder {
  return [IMChangeAvatarReq builder];
}
- (IMChangeAvatarReqBuilder*) toBuilder {
  return [IMChangeAvatarReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasAvatarUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarUrl", self.avatarUrl];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMChangeAvatarReq class]]) {
    return NO;
  }
  IMChangeAvatarReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasAvatarUrl == otherMessage.hasAvatarUrl &&
      (!self.hasAvatarUrl || [self.avatarUrl isEqual:otherMessage.avatarUrl]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasAvatarUrl) {
    hashCode = hashCode * 31 + [self.avatarUrl hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMChangeAvatarReqBuilder()
@property (strong) IMChangeAvatarReq* result;
@end

@implementation IMChangeAvatarReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMChangeAvatarReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMChangeAvatarReqBuilder*) clear {
  self.result = [[IMChangeAvatarReq alloc] init];
  return self;
}
- (IMChangeAvatarReqBuilder*) clone {
  return [IMChangeAvatarReq builderWithPrototype:result];
}
- (IMChangeAvatarReq*) defaultInstance {
  return [IMChangeAvatarReq defaultInstance];
}
- (IMChangeAvatarReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMChangeAvatarReq*) buildPartial {
  IMChangeAvatarReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMChangeAvatarReqBuilder*) mergeFrom:(IMChangeAvatarReq*) other {
  if (other == [IMChangeAvatarReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasAvatarUrl) {
    [self setAvatarUrl:other.avatarUrl];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMChangeAvatarReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMChangeAvatarReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setAvatarUrl:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMChangeAvatarReqBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMChangeAvatarReqBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasAvatarUrl {
  return result.hasAvatarUrl;
}
- (NSString*) avatarUrl {
  return result.avatarUrl;
}
- (IMChangeAvatarReqBuilder*) setAvatarUrl:(NSString*) value {
  result.hasAvatarUrl = YES;
  result.avatarUrl = value;
  return self;
}
- (IMChangeAvatarReqBuilder*) clearAvatarUrl {
  result.hasAvatarUrl = NO;
  result.avatarUrl = @"";
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMChangeAvatarReqBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMChangeAvatarReqBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMChangeAvatarRsp ()
@property UInt32 userId;
@property UInt32 resultCode;
@property (strong) NSData* attachData;
@end

@implementation IMChangeAvatarRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) value_ {
  hasResultCode_ = !!value_;
}
@synthesize resultCode;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.resultCode = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMChangeAvatarRsp* defaultIMChangeAvatarRspInstance = nil;
+ (void) initialize {
  if (self == [IMChangeAvatarRsp class]) {
    defaultIMChangeAvatarRspInstance = [[IMChangeAvatarRsp alloc] init];
  }
}
+ (IMChangeAvatarRsp*) defaultInstance {
  return defaultIMChangeAvatarRspInstance;
}
- (IMChangeAvatarRsp*) defaultInstance {
  return defaultIMChangeAvatarRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMChangeAvatarRsp*) parseFromData:(NSData*) data {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromData:data] build];
}
+ (IMChangeAvatarRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromInputStream:input] build];
}
+ (IMChangeAvatarRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMChangeAvatarRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarRspBuilder*) builder {
  return [[IMChangeAvatarRspBuilder alloc] init];
}
+ (IMChangeAvatarRspBuilder*) builderWithPrototype:(IMChangeAvatarRsp*) prototype {
  return [[IMChangeAvatarRsp builder] mergeFrom:prototype];
}
- (IMChangeAvatarRspBuilder*) builder {
  return [IMChangeAvatarRsp builder];
}
- (IMChangeAvatarRspBuilder*) toBuilder {
  return [IMChangeAvatarRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMChangeAvatarRsp class]]) {
    return NO;
  }
  IMChangeAvatarRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMChangeAvatarRspBuilder()
@property (strong) IMChangeAvatarRsp* result;
@end

@implementation IMChangeAvatarRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMChangeAvatarRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMChangeAvatarRspBuilder*) clear {
  self.result = [[IMChangeAvatarRsp alloc] init];
  return self;
}
- (IMChangeAvatarRspBuilder*) clone {
  return [IMChangeAvatarRsp builderWithPrototype:result];
}
- (IMChangeAvatarRsp*) defaultInstance {
  return [IMChangeAvatarRsp defaultInstance];
}
- (IMChangeAvatarRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMChangeAvatarRsp*) buildPartial {
  IMChangeAvatarRsp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMChangeAvatarRspBuilder*) mergeFrom:(IMChangeAvatarRsp*) other {
  if (other == [IMChangeAvatarRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMChangeAvatarRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMChangeAvatarRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMChangeAvatarRspBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMChangeAvatarRspBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasResultCode {
  return result.hasResultCode;
}
- (UInt32) resultCode {
  return result.resultCode;
}
- (IMChangeAvatarRspBuilder*) setResultCode:(UInt32) value {
  result.hasResultCode = YES;
  result.resultCode = value;
  return self;
}
- (IMChangeAvatarRspBuilder*) clearResultCode {
  result.hasResultCode = NO;
  result.resultCode = 0;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMChangeAvatarRspBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMChangeAvatarRspBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMPCLoginStatusNotify ()
@property UInt32 userId;
@property UserStatType loginStat;
@end

@implementation IMPCLoginStatusNotify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasLoginStat {
  return !!hasLoginStat_;
}
- (void) setHasLoginStat:(BOOL) value_ {
  hasLoginStat_ = !!value_;
}
@synthesize loginStat;
- (void) dealloc {
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.loginStat = UserStatTypeUserStatusOnline;
  }
  return self;
}
static IMPCLoginStatusNotify* defaultIMPCLoginStatusNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMPCLoginStatusNotify class]) {
    defaultIMPCLoginStatusNotifyInstance = [[IMPCLoginStatusNotify alloc] init];
  }
}
+ (IMPCLoginStatusNotify*) defaultInstance {
  return defaultIMPCLoginStatusNotifyInstance;
}
- (IMPCLoginStatusNotify*) defaultInstance {
  return defaultIMPCLoginStatusNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLoginStat) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLoginStat) {
    [output writeEnum:2 value:self.loginStat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLoginStat) {
    size_ += computeEnumSize(2, self.loginStat);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMPCLoginStatusNotify*) parseFromData:(NSData*) data {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromData:data] build];
}
+ (IMPCLoginStatusNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMPCLoginStatusNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromInputStream:input] build];
}
+ (IMPCLoginStatusNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPCLoginStatusNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMPCLoginStatusNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPCLoginStatusNotifyBuilder*) builder {
  return [[IMPCLoginStatusNotifyBuilder alloc] init];
}
+ (IMPCLoginStatusNotifyBuilder*) builderWithPrototype:(IMPCLoginStatusNotify*) prototype {
  return [[IMPCLoginStatusNotify builder] mergeFrom:prototype];
}
- (IMPCLoginStatusNotifyBuilder*) builder {
  return [IMPCLoginStatusNotify builder];
}
- (IMPCLoginStatusNotifyBuilder*) toBuilder {
  return [IMPCLoginStatusNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLoginStat) {
    [output appendFormat:@"%@%@: %d\n", indent, @"loginStat", self.loginStat];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMPCLoginStatusNotify class]]) {
    return NO;
  }
  IMPCLoginStatusNotify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLoginStat == otherMessage.hasLoginStat &&
      (!self.hasLoginStat || self.loginStat == otherMessage.loginStat) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLoginStat) {
    hashCode = hashCode * 31 + self.loginStat;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMPCLoginStatusNotifyBuilder()
@property (strong) IMPCLoginStatusNotify* result;
@end

@implementation IMPCLoginStatusNotifyBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMPCLoginStatusNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMPCLoginStatusNotifyBuilder*) clear {
  self.result = [[IMPCLoginStatusNotify alloc] init];
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) clone {
  return [IMPCLoginStatusNotify builderWithPrototype:result];
}
- (IMPCLoginStatusNotify*) defaultInstance {
  return [IMPCLoginStatusNotify defaultInstance];
}
- (IMPCLoginStatusNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMPCLoginStatusNotify*) buildPartial {
  IMPCLoginStatusNotify* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMPCLoginStatusNotifyBuilder*) mergeFrom:(IMPCLoginStatusNotify*) other {
  if (other == [IMPCLoginStatusNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLoginStat) {
    [self setLoginStat:other.loginStat];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMPCLoginStatusNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        UserStatType value = (UserStatType)[input readEnum];
        if (UserStatTypeIsValidValue(value)) {
          [self setLoginStat:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMPCLoginStatusNotifyBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasLoginStat {
  return result.hasLoginStat;
}
- (UserStatType) loginStat {
  return result.loginStat;
}
- (IMPCLoginStatusNotifyBuilder*) setLoginStat:(UserStatType) value {
  result.hasLoginStat = YES;
  result.loginStat = value;
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) clearLoginStat {
  result.hasLoginStat = NO;
  result.loginStat = UserStatTypeUserStatusOnline;
  return self;
}
@end

@interface IMRemoveSessionNotify ()
@property UInt32 userId;
@property SessionType sessionType;
@property UInt32 sessionId;
@end

@implementation IMRemoveSessionNotify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) value_ {
  hasSessionType_ = !!value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value_ {
  hasSessionId_ = !!value_;
}
@synthesize sessionId;
- (void) dealloc {
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0;
  }
  return self;
}
static IMRemoveSessionNotify* defaultIMRemoveSessionNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMRemoveSessionNotify class]) {
    defaultIMRemoveSessionNotifyInstance = [[IMRemoveSessionNotify alloc] init];
  }
}
+ (IMRemoveSessionNotify*) defaultInstance {
  return defaultIMRemoveSessionNotifyInstance;
}
- (IMRemoveSessionNotify*) defaultInstance {
  return defaultIMRemoveSessionNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt32:3 value:self.sessionId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt32Size(3, self.sessionId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRemoveSessionNotify*) parseFromData:(NSData*) data {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromData:data] build];
}
+ (IMRemoveSessionNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromInputStream:input] build];
}
+ (IMRemoveSessionNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMRemoveSessionNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionNotifyBuilder*) builder {
  return [[IMRemoveSessionNotifyBuilder alloc] init];
}
+ (IMRemoveSessionNotifyBuilder*) builderWithPrototype:(IMRemoveSessionNotify*) prototype {
  return [[IMRemoveSessionNotify builder] mergeFrom:prototype];
}
- (IMRemoveSessionNotifyBuilder*) builder {
  return [IMRemoveSessionNotify builder];
}
- (IMRemoveSessionNotifyBuilder*) toBuilder {
  return [IMRemoveSessionNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"sessionType", self.sessionType];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRemoveSessionNotify class]]) {
    return NO;
  }
  IMRemoveSessionNotify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRemoveSessionNotifyBuilder()
@property (strong) IMRemoveSessionNotify* result;
@end

@implementation IMRemoveSessionNotifyBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMRemoveSessionNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMRemoveSessionNotifyBuilder*) clear {
  self.result = [[IMRemoveSessionNotify alloc] init];
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clone {
  return [IMRemoveSessionNotify builderWithPrototype:result];
}
- (IMRemoveSessionNotify*) defaultInstance {
  return [IMRemoveSessionNotify defaultInstance];
}
- (IMRemoveSessionNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRemoveSessionNotify*) buildPartial {
  IMRemoveSessionNotify* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMRemoveSessionNotifyBuilder*) mergeFrom:(IMRemoveSessionNotify*) other {
  if (other == [IMRemoveSessionNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRemoveSessionNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRemoveSessionNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMRemoveSessionNotifyBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasSessionType {
  return result.hasSessionType;
}
- (SessionType) sessionType {
  return result.sessionType;
}
- (IMRemoveSessionNotifyBuilder*) setSessionType:(SessionType) value {
  result.hasSessionType = YES;
  result.sessionType = value;
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clearSessionType {
  result.hasSessionType = NO;
  result.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (UInt32) sessionId {
  return result.sessionId;
}
- (IMRemoveSessionNotifyBuilder*) setSessionId:(UInt32) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0;
  return self;
}
@end

@interface IMDepartmentReq ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSData* attachData;
@end

@implementation IMDepartmentReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) value_ {
  hasLatestUpdateTime_ = !!value_;
}
@synthesize latestUpdateTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMDepartmentReq* defaultIMDepartmentReqInstance = nil;
+ (void) initialize {
  if (self == [IMDepartmentReq class]) {
    defaultIMDepartmentReqInstance = [[IMDepartmentReq alloc] init];
  }
}
+ (IMDepartmentReq*) defaultInstance {
  return defaultIMDepartmentReqInstance;
}
- (IMDepartmentReq*) defaultInstance {
  return defaultIMDepartmentReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMDepartmentReq*) parseFromData:(NSData*) data {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromData:data] build];
}
+ (IMDepartmentReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromInputStream:input] build];
}
+ (IMDepartmentReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMDepartmentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentReqBuilder*) builder {
  return [[IMDepartmentReqBuilder alloc] init];
}
+ (IMDepartmentReqBuilder*) builderWithPrototype:(IMDepartmentReq*) prototype {
  return [[IMDepartmentReq builder] mergeFrom:prototype];
}
- (IMDepartmentReqBuilder*) builder {
  return [IMDepartmentReq builder];
}
- (IMDepartmentReqBuilder*) toBuilder {
  return [IMDepartmentReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMDepartmentReq class]]) {
    return NO;
  }
  IMDepartmentReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMDepartmentReqBuilder()
@property (strong) IMDepartmentReq* result;
@end

@implementation IMDepartmentReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMDepartmentReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMDepartmentReqBuilder*) clear {
  self.result = [[IMDepartmentReq alloc] init];
  return self;
}
- (IMDepartmentReqBuilder*) clone {
  return [IMDepartmentReq builderWithPrototype:result];
}
- (IMDepartmentReq*) defaultInstance {
  return [IMDepartmentReq defaultInstance];
}
- (IMDepartmentReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMDepartmentReq*) buildPartial {
  IMDepartmentReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMDepartmentReqBuilder*) mergeFrom:(IMDepartmentReq*) other {
  if (other == [IMDepartmentReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMDepartmentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMDepartmentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMDepartmentReqBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMDepartmentReqBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return result.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return result.latestUpdateTime;
}
- (IMDepartmentReqBuilder*) setLatestUpdateTime:(UInt32) value {
  result.hasLatestUpdateTime = YES;
  result.latestUpdateTime = value;
  return self;
}
- (IMDepartmentReqBuilder*) clearLatestUpdateTime {
  result.hasLatestUpdateTime = NO;
  result.latestUpdateTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMDepartmentReqBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMDepartmentReqBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMDepartmentRsp ()
@property UInt32 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSMutableArray * deptListArray;
@property (strong) NSData* attachData;
@end

@implementation IMDepartmentRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) value_ {
  hasLatestUpdateTime_ = !!value_;
}
@synthesize latestUpdateTime;
@synthesize deptListArray;
@dynamic deptList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value_ {
  hasAttachData_ = !!value_;
}
@synthesize attachData;
- (void) dealloc {
  self.deptListArray = nil;
  self.attachData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMDepartmentRsp* defaultIMDepartmentRspInstance = nil;
+ (void) initialize {
  if (self == [IMDepartmentRsp class]) {
    defaultIMDepartmentRspInstance = [[IMDepartmentRsp alloc] init];
  }
}
+ (IMDepartmentRsp*) defaultInstance {
  return defaultIMDepartmentRspInstance;
}
- (IMDepartmentRsp*) defaultInstance {
  return defaultIMDepartmentRspInstance;
}
- (NSArray *)deptList {
  return deptListArray;
}
- (DepartInfo*)deptListAtIndex:(NSUInteger)index {
  return [deptListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  __block BOOL isInitdeptList = YES;
   [self.deptList enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdeptList = NO;
      *stop = YES;
    }
  }];
  if (!isInitdeptList) return isInitdeptList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMDepartmentRsp*) parseFromData:(NSData*) data {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromData:data] build];
}
+ (IMDepartmentRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromInputStream:input] build];
}
+ (IMDepartmentRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMDepartmentRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentRspBuilder*) builder {
  return [[IMDepartmentRspBuilder alloc] init];
}
+ (IMDepartmentRspBuilder*) builderWithPrototype:(IMDepartmentRsp*) prototype {
  return [[IMDepartmentRsp builder] mergeFrom:prototype];
}
- (IMDepartmentRspBuilder*) builder {
  return [IMDepartmentRsp builder];
}
- (IMDepartmentRspBuilder*) toBuilder {
  return [IMDepartmentRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"deptList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMDepartmentRsp class]]) {
    return NO;
  }
  IMDepartmentRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      [self.deptListArray isEqualToArray:otherMessage.deptListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMDepartmentRspBuilder()
@property (strong) IMDepartmentRsp* result;
@end

@implementation IMDepartmentRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IMDepartmentRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMDepartmentRspBuilder*) clear {
  self.result = [[IMDepartmentRsp alloc] init];
  return self;
}
- (IMDepartmentRspBuilder*) clone {
  return [IMDepartmentRsp builderWithPrototype:result];
}
- (IMDepartmentRsp*) defaultInstance {
  return [IMDepartmentRsp defaultInstance];
}
- (IMDepartmentRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMDepartmentRsp*) buildPartial {
  IMDepartmentRsp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IMDepartmentRspBuilder*) mergeFrom:(IMDepartmentRsp*) other {
  if (other == [IMDepartmentRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.deptListArray.count > 0) {
    if (result.deptListArray == nil) {
      result.deptListArray = [[NSMutableArray alloc] initWithArray:other.deptListArray];
    } else {
      [result.deptListArray addObjectsFromArray:other.deptListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMDepartmentRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMDepartmentRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 26: {
        DepartInfoBuilder* subBuilder = [DepartInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDeptList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (IMDepartmentRspBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (IMDepartmentRspBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return result.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return result.latestUpdateTime;
}
- (IMDepartmentRspBuilder*) setLatestUpdateTime:(UInt32) value {
  result.hasLatestUpdateTime = YES;
  result.latestUpdateTime = value;
  return self;
}
- (IMDepartmentRspBuilder*) clearLatestUpdateTime {
  result.hasLatestUpdateTime = NO;
  result.latestUpdateTime = 0;
  return self;
}
- (NSMutableArray *)deptList {
  return result.deptListArray;
}
- (DepartInfo*)deptListAtIndex:(NSUInteger)index {
  return [result deptListAtIndex:index];
}
- (IMDepartmentRspBuilder *)addDeptList:(DepartInfo*)value {
  if (result.deptListArray == nil) {
    result.deptListArray = [[NSMutableArray alloc]init];
  }
  [result.deptListArray addObject:value];
  return self;
}
- (IMDepartmentRspBuilder *)setDeptListArray:(NSArray *)array {
  result.deptListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMDepartmentRspBuilder *)clearDeptList {
  result.deptListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMDepartmentRspBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMDepartmentRspBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
